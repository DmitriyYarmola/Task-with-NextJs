{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Create-Project\\\\src\\\\Components\\\\Features\\\\Posts\\\\Organisms\\\\Post.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'antd';\nimport { CreatePostForm, PostInformation } from '@UI/Organisms';\nimport { CommentItem } from '@UI/Atoms';\nimport { ModalWindowTemplate } from '@UI/Templates';\nconst Wrapped = styled.div.withConfig({\n  displayName: \"Post__Wrapped\",\n  componentId: \"z17osf-0\"\n})([\"display:grid;align-items:center;width:550px;margin:0 auto;\"]);\nconst Information = styled.div.withConfig({\n  displayName: \"Post__Information\",\n  componentId: \"z17osf-1\"\n})([\"\"]);\nconst PositionWrapped = styled.div.withConfig({\n  displayName: \"Post__PositionWrapped\",\n  componentId: \"z17osf-2\"\n})([\"display:grid;align-items:center;height:100%;\"]);\nconst Actions = styled.div.withConfig({\n  displayName: \"Post__Actions\",\n  componentId: \"z17osf-3\"\n})([\"margin-bottom:15px;\"]);\nexport const Post = ({\n  post\n}) => {\n  const {\n    0: isEdit,\n    1: setIsEdit\n  } = useState(false);\n  const {\n    id,\n    title,\n    body,\n    comments\n  } = post;\n  const dispatch = useDispatch();\n  const onEdit = useCallback(data => {\n    dispatch({\n      type: 'EDIT_POST',\n      payload: {\n        id,\n        data\n      }\n    });\n  }, [dispatch, id]);\n  return __jsx(React.Fragment, null, __jsx(PositionWrapped, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }\n  }, __jsx(Wrapped, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 6\n    }\n  }, __jsx(Button, {\n    onClick: () => setIsEdit(!isEdit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Edit\")), __jsx(Information, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }\n  }, __jsx(PostInformation, {\n    title: title,\n    body: body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(React.Fragment, null, comments.map(({\n    body,\n    id\n  }) => {\n    return __jsx(CommentItem, {\n      key: id,\n      body: body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    });\n  })))))), isEdit && __jsx(ModalWindowTemplate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(CreatePostForm, {\n    onSubmit: onEdit,\n    initialValue: (title, body),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 6\n    }\n  })));\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Organisms/Post.tsx"],"names":["React","useCallback","useState","styled","useDispatch","Button","CreatePostForm","PostInformation","CommentItem","ModalWindowTemplate","Wrapped","div","Information","PositionWrapped","Actions","Post","post","isEdit","setIsEdit","id","title","body","comments","dispatch","onEdit","data","type","payload","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,MAAvB;AAEA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,eAAhD;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,mBAAT,QAAoC,eAApC;AAEA,MAAMC,OAAO,GAAGP,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,kEAAb;AAMA,MAAMC,WAAW,GAAGT,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,QAAjB;AACA,MAAME,eAAe,GAAGV,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,oDAArB;AAKA,MAAMG,OAAO,GAAGX,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,2BAAb;AAMA,OAAO,MAAMI,IAAyB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkC;AAC1E,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBhB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAEiB,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,MAAgCN,IAAtC;AACA,QAAMO,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,MAAM,GAAGvB,WAAW,CACxBwB,IAAD,IAAoB;AACnBF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE;AAAER,QAAAA,EAAF;AAAMM,QAAAA;AAAN;AAA9B,KAAD,CAAR;AACA,GAHwB,EAIzB,CAACF,QAAD,EAAWJ,EAAX,CAJyB,CAA1B;AAMA,SACC,4BACC,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMD,SAAS,CAAC,CAACD,MAAF,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CADD,EAIC,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAEG,KAAxB;AAA+B,IAAA,IAAI,EAAEC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,4BACEC,QAAQ,CAACM,GAAT,CAAa,CAAC;AAAEP,IAAAA,IAAF;AAAQF,IAAAA;AAAR,GAAD,KAAkB;AAC/B,WAAO,MAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,EAAlB;AAAsB,MAAA,IAAI,EAAEE,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA,GAFA,CADF,CADD,CADD,CAJD,CADD,CADD,EAiBEJ,MAAM,IACN,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEO,MAA1B;AAAkC,IAAA,YAAY,GAAGJ,KAAK,EAAEC,IAAV,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAlBF,CADD;AAyBA,CAnCM","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Button } from 'antd'\r\nimport { PostInformationType, PostType } from '@API/REST'\r\nimport { CreatePostForm, PostInformation } from '@UI/Organisms'\r\nimport { CommentItem } from '@UI/Atoms'\r\nimport { ModalWindowTemplate } from '@UI/Templates'\r\n\r\nconst Wrapped = styled.div`\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n\twidth: 550px;\r\n\tmargin: 0 auto;\r\n`\r\nconst Information = styled.div``\r\nconst PositionWrapped = styled.div`\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n\theight: 100%;\r\n`\r\nconst Actions = styled.div`\r\n\tmargin-bottom: 15px;\r\n`\r\ninterface PropsType {\r\n\tpost: PostInformationType\r\n}\r\nexport const Post: React.FC<PropsType> = ({ post }): React.ReactElement => {\r\n\tconst [isEdit, setIsEdit] = useState(false)\r\n\tconst { id, title, body, comments } = post\r\n\tconst dispatch = useDispatch()\r\n\tconst onEdit = useCallback(\r\n\t\t(data: PostType) => {\r\n\t\t\tdispatch({ type: 'EDIT_POST', payload: { id, data } })\r\n\t\t},\r\n\t\t[dispatch, id]\r\n\t)\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PositionWrapped>\r\n\t\t\t\t<Wrapped>\r\n\t\t\t\t\t<Actions>\r\n\t\t\t\t\t\t<Button onClick={() => setIsEdit(!isEdit)}>Edit</Button>\r\n\t\t\t\t\t</Actions>\r\n\t\t\t\t\t<Information>\r\n\t\t\t\t\t\t<PostInformation title={title} body={body}>\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t{comments.map(({ body, id }) => {\r\n\t\t\t\t\t\t\t\t\treturn <CommentItem key={id} body={body} />\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t</PostInformation>\r\n\t\t\t\t\t</Information>\r\n\t\t\t\t</Wrapped>\r\n\t\t\t</PositionWrapped>\r\n\t\t\t{isEdit && (\r\n\t\t\t\t<ModalWindowTemplate>\r\n\t\t\t\t\t<CreatePostForm onSubmit={onEdit} initialValue={(title, body)} />\r\n\t\t\t\t</ModalWindowTemplate>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}