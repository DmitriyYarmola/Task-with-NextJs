{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n// const sagaMiddleware = createSagaMiddleware()\n// const middlewares = [sagaMiddleware]\n// export const makeStore = (initialState: any) => {\n// \tsagaMiddleware.run(rootSaga)\n// \treturn createStore(\n// \t\trootReducer,\n// \t\tinitialState,\n// \t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\n// \t)\n// }\nexport function configureStore(preloadedState, {\n  isServer,\n  req = null\n}) {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, preloadedState, applyMiddleware(sagaMiddleware));\n\n  if (req || !isServer) {\n    //@ts-ignore\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","configureStore","preloadedState","isServer","req","sagaMiddleware","store","sagaTask","run"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AAEA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASC,cAAT,CAAwBC,cAAxB,EAA8C;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,GAAG,GAAG;AAAlB,CAA9C,EAAwE;AAC9E,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,QAAMQ,KAAK,GAAGT,WAAW,CAACE,WAAD,EAAcG,cAAd,EAA8BN,eAAe,CAACS,cAAD,CAA7C,CAAzB;;AAEA,MAAID,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACrB;AACAG,IAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBR,QAAnB,CAAjB;AACA;;AAED,SAAOM,KAAP;AACA","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n\r\n// const sagaMiddleware = createSagaMiddleware()\r\n// const middlewares = [sagaMiddleware]\r\n// export const makeStore = (initialState: any) => {\r\n// \tsagaMiddleware.run(rootSaga)\r\n// \treturn createStore(\r\n// \t\trootReducer,\r\n// \t\tinitialState,\r\n// \t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\r\n// \t)\r\n// }\r\n\r\nexport function configureStore(preloadedState?: any, { isServer, req = null }) {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(rootReducer, preloadedState, applyMiddleware(sagaMiddleware))\r\n\r\n\tif (req || !isServer) {\r\n\t\t//@ts-ignore\r\n\t\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\t}\r\n\r\n\treturn store\r\n}\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}