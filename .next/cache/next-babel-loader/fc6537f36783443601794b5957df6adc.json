{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getPostsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(createPostSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { call, put, all, takeEvery } from 'redux-saga/effects';\nimport { actions } from '@Features/Posts/Model/actions';\nimport { API } from '@API/index';\nimport * as types from './types';\n\nfunction getPostsSaga() {\n  var response;\n  return _regeneratorRuntime.wrap(function getPostsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(actions.setLoading(true));\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return call(API.PostsAPI.getPosts);\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return put(actions.setPosts(response.data));\n\n        case 8:\n          _context.next = 10;\n          return put(actions.setLoading(false));\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 16;\n          return put(actions.setLoading(false));\n\n        case 16:\n          console.log(_context.t0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 12]]);\n}\n\nfunction createPostSaga(_ref) {\n  var payload, response;\n  return _regeneratorRuntime.wrap(function createPostSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n          _context2.next = 3;\n          return put(actions.setLoading(true));\n\n        case 3:\n          _context2.prev = 3;\n          _context2.next = 6;\n          return call(API.PostsAPI.createPost, payload);\n\n        case 6:\n          _context2.next = 8;\n          return call(API.PostsAPI.getPosts);\n\n        case 8:\n          response = _context2.sent;\n          _context2.next = 11;\n          return put(actions.setPosts(response.data));\n\n        case 11:\n          _context2.next = 13;\n          return put(actions.setLoading(false));\n\n        case 13:\n          _context2.next = 15;\n          return put();\n\n        case 15:\n          _context2.next = 22;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](3);\n          _context2.next = 21;\n          return put(actions.setLoading(false));\n\n        case 21:\n          console.log(_context2.t0);\n\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[3, 17]]);\n}\n\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(types.GET_POSTS, getPostsSaga), takeEvery(types.CREATE_POST, createPostSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Model/saga.ts"],"names":["getPostsSaga","createPostSaga","rootSaga","call","put","all","takeEvery","actions","API","types","setLoading","PostsAPI","getPosts","response","setPosts","data","console","log","payload","createPost","GET_POSTS","CREATE_POST"],"mappings":";;oDAMUA,Y;qDAgBAC,c;qDAaOC,Q;;AAnCjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,GAAT,QAA8B,YAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;;AAEA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMI,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,IAAnB,CAAD,CAAT;;AADD;AAAA;AAAA;AAGmB,iBAAMP,IAAI,CAACK,GAAG,CAACG,QAAJ,CAAaC,QAAd,CAAV;;AAHnB;AAGQC,UAAAA,QAHR;AAAA;AAIE,iBAAMT,GAAG,CAACG,OAAO,CAACO,QAAR,CAAiBD,QAAQ,CAACE,IAA1B,CAAD,CAAT;;AAJF;AAAA;AAKE,iBAAMX,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,KAAnB,CAAD,CAAT;;AALF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOE,iBAAMN,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,KAAnB,CAAD,CAAT;;AAPF;AAQEM,UAAAA,OAAO,CAACC,GAAR;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUhB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2BiB,UAAAA,OAA3B,QAA2BA,OAA3B;AAAA;AACC,iBAAMd,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,IAAnB,CAAD,CAAT;;AADD;AAAA;AAAA;AAGE,iBAAMP,IAAI,CAACK,GAAG,CAACG,QAAJ,CAAaQ,UAAd,EAA0BD,OAA1B,CAAV;;AAHF;AAAA;AAImB,iBAAMf,IAAI,CAACK,GAAG,CAACG,QAAJ,CAAaC,QAAd,CAAV;;AAJnB;AAIQC,UAAAA,QAJR;AAAA;AAKE,iBAAMT,GAAG,CAACG,OAAO,CAACO,QAAR,CAAiBD,QAAQ,CAACE,IAA1B,CAAD,CAAT;;AALF;AAAA;AAME,iBAAMX,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,KAAnB,CAAD,CAAT;;AANF;AAAA;AAOE,iBAAMN,GAAG,EAAT;;AAPF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMA,GAAG,CAACG,OAAO,CAACG,UAAR,CAAmB,KAAnB,CAAD,CAAT;;AATF;AAUEM,UAAAA,OAAO,CAACC,GAAR;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,OAAO,SAAUf,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,iBAAMG,GAAG,CAAC,CACTC,SAAS,CAACG,KAAK,CAACW,SAAP,EAAkBpB,YAAlB,CADA,EAETM,SAAS,CAACG,KAAK,CAACY,WAAP,EAAoBpB,cAApB,CAFA,CAAD,CAAT;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, all, takeEvery } from 'redux-saga/effects'\r\nimport { push } from 'connected-next-router'\r\nimport { actions } from '@Features/Posts/Model/actions'\r\nimport { API, PostType } from '@API/index'\r\nimport * as types from './types'\r\n\r\nfunction* getPostsSaga() {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface CreatePost {\r\n\ttype: string\r\n\tpayload: PostType\r\n}\r\nfunction* createPostSaga({ payload }: CreatePost) {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.createPost, payload)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put()\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\nexport function* rootSaga() {\r\n\tyield all([\r\n\t\ttakeEvery(types.GET_POSTS, getPostsSaga),\r\n\t\ttakeEvery(types.CREATE_POST, createPostSaga),\r\n\t])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}