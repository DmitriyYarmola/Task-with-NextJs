{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n\n// const sagaMiddleware = createSagaMiddleware()\n// const middlewares = [sagaMiddleware]\n// export const makeStore = (initialState: any) => {\n// \tsagaMiddleware.run(rootSaga)\n// \treturn createStore(\n// \t\trootReducer,\n// \t\tinitialState,\n// \t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\n// \t)\n// }\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var makeStore = function makeStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, bindMiddleware([sagaMiddleware])); //@ts-itgnore\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","createWrapper","rootReducer","rootSaga","bindMiddleware","middleware","require","composeWithDevTools","makeStore","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":";AAAA,SACCA,eADD,EAICC,WAJD,QAQO,OARP;AAUA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,SAASC,aAAT,QAAyC,oBAAzC;AACA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAA6C;AACnE,YAA2C;AAAA,mBACVC,OAAO,CAAC,0BAAD,CADG;AAAA,QAClCC,mBADkC,YAClCA,mBADkC;;AAE1C,WAAOA,mBAAmB,CAACT,eAAe,MAAf,4BAAmBO,UAAnB,EAAD,CAA1B;AACA;;AACD,SAAOP,eAAe,MAAf,4BAAmBO,UAAnB,EAAP;AACA,CAND;;AAQA,OAAO,IAAMG,SAAyB,GAAG,SAA5BA,SAA4B,GAAM;AAC9C,MAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AAEA,MAAMU,KAAK,GAAGX,WAAW,CAACG,WAAD,EAAcE,cAAc,CAAC,CAACK,cAAD,CAAD,CAA5B,CAAzB,CAH8C,CAI9C;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBT,QAAnB,CAAjB;AAEA,SAAOO,KAAP;AACA,CARM;AAUP,OAAO,IAAMG,OAAO,GAAGZ,aAAa,CAAeO,SAAf,EAA0B;AAAEM,EAAAA,KAAK,EAAE;AAAT,CAA1B,CAA7B","sourcesContent":["import {\r\n\tapplyMiddleware,\r\n\tcombineReducers,\r\n\tcompose,\r\n\tcreateStore,\r\n\tMiddleware,\r\n\tStore,\r\n\tStoreEnhancer,\r\n} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n\r\n// const sagaMiddleware = createSagaMiddleware()\r\n// const middlewares = [sagaMiddleware]\r\n// export const makeStore = (initialState: any) => {\r\n// \tsagaMiddleware.run(rootSaga)\r\n// \treturn createStore(\r\n// \t\trootReducer,\r\n// \t\tinitialState,\r\n// \t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\r\n// \t)\r\n// }\r\n\r\nconst bindMiddleware = (middleware: Middleware[]): StoreEnhancer => {\r\n\tif (process.env.NODE_ENV !== 'production') {\r\n\t\tconst { composeWithDevTools } = require('redux-devtools-extension')\r\n\t\treturn composeWithDevTools(applyMiddleware(...middleware))\r\n\t}\r\n\treturn applyMiddleware(...middleware)\r\n}\r\n\r\nexport const makeStore: MakeStore<any> = () => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(rootReducer, bindMiddleware([sagaMiddleware]))\r\n\t//@ts-itgnore\r\n\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\r\n\treturn store\r\n}\r\n\r\nexport const wrapper = createWrapper<AppStateType>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}