{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Create-Project\\\\src\\\\Components\\\\Features\\\\Posts\\\\Molecules\\\\ListPosts.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { PostItem } from '@UI/Organisms';\nimport { API } from '@API/index';\nimport { PostsActions as Actions } from '@Features/Posts';\nconst Posts = styled.div.withConfig({\n  displayName: \"ListPosts__Posts\",\n  componentId: \"sc-1ab65y6-0\"\n})([\"display:grid;grid-template-columns:repeat(3,1fr);grid-gap:20px;\"]);\nexport const ListPosts = ({\n  posts\n}) => {\n  const dispatch = useDispatch();\n  const onEdit = useCallback(id => {\n    API.PostsAPI.getPosts().then(response => {\n      console.log('gfdgd', response);\n      dispatch(Actions.setPosts(response.data));\n      dispatch(Actions.setLoading(true));\n    });\n    dispatch(Actions.setLoading(true));\n  }, [dispatch]);\n  const onDelete = useCallback(id => {}, []);\n  return __jsx(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, posts.map(({\n    title,\n    body,\n    id\n  }) => __jsx(PostItem, {\n    key: id,\n    id: id,\n    title: title,\n    body: body,\n    onEdit: onEdit,\n    onDelete: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  })));\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Molecules/ListPosts.tsx"],"names":["React","useCallback","styled","useDispatch","PostItem","API","PostsActions","Actions","Posts","div","ListPosts","posts","dispatch","onEdit","id","PostsAPI","getPosts","then","response","console","log","setPosts","data","setLoading","onDelete","map","title","body"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,YAAY,IAAIC,OAAzB,QAAwC,iBAAxC;AAEA,MAAMC,KAAK,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,uEAAX;AAQA,OAAO,MAAMC,SAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAChF,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGZ,WAAW,CACxBa,EAAD,IAAgB;AACfT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,QAAb,GAAwBC,IAAxB,CAA8BC,QAAD,IAAc;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,QAArB;AACAN,MAAAA,QAAQ,CAACL,OAAO,CAACc,QAAR,CAAiBH,QAAQ,CAACI,IAA1B,CAAD,CAAR;AACAV,MAAAA,QAAQ,CAACL,OAAO,CAACgB,UAAR,CAAmB,IAAnB,CAAD,CAAR;AACA,KAJD;AAKAX,IAAAA,QAAQ,CAACL,OAAO,CAACgB,UAAR,CAAmB,IAAnB,CAAD,CAAR;AACA,GARwB,EASzB,CAACX,QAAD,CATyB,CAA1B;AAWA,QAAMY,QAAQ,GAAGvB,WAAW,CAAEa,EAAD,IAAgB,CAAE,CAAnB,EAAqB,EAArB,CAA5B;AAEA,SACC,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEH,KAAK,CAACc,GAAN,CAAU,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeb,IAAAA;AAAf,GAAD,KACV,MAAC,QAAD;AACC,IAAA,GAAG,EAAEA,EADN;AAEC,IAAA,EAAE,EAAEA,EAFL;AAGC,IAAA,KAAK,EAAEY,KAHR;AAIC,IAAA,IAAI,EAAEC,IAJP;AAKC,IAAA,MAAM,EAAEd,MALT;AAMC,IAAA,QAAQ,EAAEW,QANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CADD;AAcA,CA7BM","sourcesContent":["import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { PostType } from '@API/REST'\r\nimport { PostItem } from '@UI/Organisms'\r\nimport { API } from '@API/index'\r\nimport { PostsActions as Actions } from '@Features/Posts'\r\n\r\nconst Posts = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(3, 1fr);\r\n\tgrid-gap: 20px;\r\n`\r\ninterface PropsType {\r\n\tposts: PostType[]\r\n}\r\nexport const ListPosts: React.FC<PropsType> = ({ posts }): React.ReactElement => {\r\n\tconst dispatch = useDispatch()\r\n\tconst onEdit = useCallback(\r\n\t\t(id: number) => {\r\n\t\t\tAPI.PostsAPI.getPosts().then((response) => {\r\n\t\t\t\tconsole.log('gfdgd', response)\r\n\t\t\t\tdispatch(Actions.setPosts(response.data))\r\n\t\t\t\tdispatch(Actions.setLoading(true))\r\n\t\t\t})\r\n\t\t\tdispatch(Actions.setLoading(true))\r\n\t\t},\r\n\t\t[dispatch]\r\n\t)\r\n\tconst onDelete = useCallback((id: number) => {}, [])\r\n\r\n\treturn (\r\n\t\t<Posts>\r\n\t\t\t{posts.map(({ title, body, id }: PostType) => (\r\n\t\t\t\t<PostItem\r\n\t\t\t\t\tkey={id}\r\n\t\t\t\t\tid={id}\r\n\t\t\t\t\ttitle={title}\r\n\t\t\t\t\tbody={body}\r\n\t\t\t\t\tonEdit={onEdit}\r\n\t\t\t\t\tonDelete={onDelete}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</Posts>\r\n\t)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}