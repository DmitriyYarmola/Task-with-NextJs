{"ast":null,"code":"import { call, put, all, takeEvery } from 'redux-saga/effects';\nimport { API } from '@API/index';\nimport { actions } from './actions';\nimport * as types from './types';\n\nfunction* getPostsSaga() {\n  yield put(actions.setLoading(true));\n\n  try {\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* createPostSaga({\n  payload\n}) {\n  const {\n    data,\n    push\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.createPost, data);\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n    yield put(push('/'));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* deletePostSaga({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.deletePost, id);\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n    yield put(push('/'));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* viewPostSaga({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    const response = yield call(API.PostsAPI.viewPost, id);\n    yield put(actions.setPost(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* editPostSaga({\n  payload\n}) {\n  const {\n    id,\n    data\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.updatePost, id, data);\n    const response = yield call(API.PostsAPI.viewPost, id);\n    yield put(actions.setPost(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* sendCommentPostSaga({\n  payload\n}) {\n  console.log('se');\n  const {\n    postId,\n    body\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.CommentsAPI.createComments, {\n      postId,\n      body\n    });\n    const response = yield call(API.PostsAPI.viewPost, postId);\n    yield put(actions.setPost(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nexport function* rootSaga() {\n  yield all([takeEvery(types.GET_POSTS, getPostsSaga), takeEvery(types.CREATE_POST, createPostSaga), takeEvery(types.DELETE_POST, deletePostSaga), takeEvery(types.VIEW_POST, viewPostSaga), takeEvery(types.EDIT_POST, editPostSaga), takeEvery(types.SEND_MESSAGE, sendCommentPostSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Model/saga.ts"],"names":["call","put","all","takeEvery","API","actions","types","getPostsSaga","setLoading","response","PostsAPI","getPosts","setPosts","data","error","console","log","createPostSaga","payload","push","createPost","deletePostSaga","id","deletePost","viewPostSaga","viewPost","setPost","editPostSaga","updatePost","sendCommentPostSaga","postId","body","CommentsAPI","createComments","rootSaga","GET_POSTS","CREATE_POST","DELETE_POST","VIEW_POST","EDIT_POST","SEND_MESSAGE"],"mappings":"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","sourcesContent":["import { call, put, all, takeEvery } from 'redux-saga/effects'\r\nimport { API, PostType } from '@API/index'\r\nimport { actions } from './actions'\r\nimport * as types from './types'\r\n\r\nfunction* getPostsSaga() {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface CreatePostType {\r\n\ttype: string\r\n\tpayload: { data: PostType; push: any }\r\n}\r\nfunction* createPostSaga({ payload }: CreatePostType) {\r\n\tconst { data, push } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.createPost, data)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put(push('/'))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface DeletePostType {\r\n\ttype: string\r\n\tpayload: { id: number }\r\n}\r\nfunction* deletePostSaga({ payload }: DeletePostType) {\r\n\tconst { id } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.deletePost, id)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put(push('/'))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface ViewPostType {\r\n\ttype: string\r\n\tpayload: { id: number }\r\n}\r\n\r\nfunction* viewPostSaga({ payload }: ViewPostType) {\r\n\tconst { id } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.viewPost, id)\r\n\t\tyield put(actions.setPost(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface EditPostType {\r\n\ttype: string\r\n\tpayload: { id: number; data: PostType }\r\n}\r\n\r\nfunction* editPostSaga({ payload }: EditPostType) {\r\n\tconst { id, data } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.updatePost, id, data)\r\n\t\tconst response = yield call(API.PostsAPI.viewPost, id)\r\n\t\tyield put(actions.setPost(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\ninterface SendCommentType {\r\n\ttype: string\r\n\tpayload: { body: string; postId: number }\r\n}\r\nfunction* sendCommentPostSaga({ payload }: SendCommentType) {\r\n\tconsole.log('se')\r\n\tconst { postId, body } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.CommentsAPI.createComments, { postId, body })\r\n\t\tconst response = yield call(API.PostsAPI.viewPost, postId)\r\n\t\tyield put(actions.setPost(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\nexport function* rootSaga() {\r\n\tyield all([\r\n\t\ttakeEvery(types.GET_POSTS, getPostsSaga),\r\n\t\ttakeEvery(types.CREATE_POST, createPostSaga),\r\n\t\ttakeEvery(types.DELETE_POST, deletePostSaga),\r\n\t\ttakeEvery(types.VIEW_POST, viewPostSaga),\r\n\t\ttakeEvery(types.EDIT_POST, editPostSaga),\r\n\t\ttakeEvery(types.SEND_MESSAGE, sendCommentPostSaga),\r\n\t])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}