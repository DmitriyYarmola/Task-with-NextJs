{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nexport const store = createStore(rootReducer); //@ts-ignore\n\nconst composeEnhancers = createStore(rootReducer(history), composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nconst makeStore = context => //@ts-ignore\ncomposeEnhancers(applyMiddleware(sagaMiddleware)); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createWrapper","rootReducer","store","composeEnhancers","history","sagaMiddleware","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AAIA,SAASC,aAAT,QAAkD,oBAAlD;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,KAAK,GAAGH,WAAW,CAACE,WAAD,CAAzB,C,CACP;;AACA,MAAME,gBAAgB,GAAGJ,WAAW,CACnCE,WAAW,CAACG,OAAD,CADwB,EAEnCD,gBAAgB,CAACL,eAAe,CAACO,cAAD,CAAhB,CAFmB,CAApC;;AAKA,MAAMC,SAAyB,GAAIC,OAAD,IACjC;AACAJ,gBAAgB,CAACL,eAAe,CAACO,cAAD,CAAhB,CAFjB,C,CAIA;;;AACA,OAAO,MAAMG,OAAO,GAAGR,aAAa,CAAMM,SAAN,EAAiB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\n\r\nimport { createWrapper, MakeStore, Context } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { rootReducer } from './root-reducer'\r\n\r\nexport const store = createStore(rootReducer)\r\n//@ts-ignore\r\nconst composeEnhancers = createStore(\r\n\trootReducer(history),\r\n\tcomposeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nconst makeStore: MakeStore<any> = (context: Context) =>\r\n\t//@ts-ignore\r\n\tcomposeEnhancers(applyMiddleware(sagaMiddleware))\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}