{"ast":null,"code":"import { createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nexport var store = createStore(rootReducer); // @ts-ignore\n\nexport var wrapper = createWrapper(store, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["createStore","createWrapper","rootReducer","store","wrapper","debug"],"mappings":"AAAA,SAAoDA,WAApD,QAA8E,OAA9E;AAIA,SAASC,aAAT,QAAyC,oBAAzC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,IAAMC,KAAK,GAAGH,WAAW,CAACE,WAAD,CAAzB,C,CACP;;AACA,OAAO,IAAME,OAAO,GAAGH,aAAa,CAAME,KAAN,EAAa;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAAb,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { Context } from 'react'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { rootReducer } from './root-reducer'\r\n\r\nexport const store = createStore(rootReducer)\r\n// @ts-ignore\r\nexport const wrapper = createWrapper<any>(store, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}