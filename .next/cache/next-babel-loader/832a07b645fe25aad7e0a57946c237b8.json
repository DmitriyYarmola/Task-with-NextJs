{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nconst test = createSagaMiddleware();\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(test))); //@ts-ignore\n\nconst makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  return store;\n}; // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","createWrapper","rootReducer","test","store","makeStore","context","sagaMiddleware","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAkD,oBAAlD;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,MAAMC,IAAI,GAAGH,oBAAoB,EAAjC;AACA,OAAO,MAAMI,KAAK,GAAGN,WAAW,CAACI,WAAD,EAAcH,mBAAmB,CAACF,eAAe,CAACM,IAAD,CAAhB,CAAjC,CAAzB,C,CAEP;;AACA,MAAME,SAAyB,GAAIC,OAAD,IAAsB;AACvD,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,SAAOI,KAAP;AACA,CAJD,C,CAMA;;;AACA,OAAO,MAAMI,OAAO,GAAGP,aAAa,CAAMI,SAAN,EAAiB;AAAEI,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\n\r\nimport { createWrapper, MakeStore, Context } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { rootReducer } from './root-reducer'\r\n\r\nconst test = createSagaMiddleware()\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(test)))\r\n\r\n//@ts-ignore\r\nconst makeStore: MakeStore<any> = (context: Context) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\t\r\n\treturn store\r\n}\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}