{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Create-Project\\\\src\\\\Components\\\\Features\\\\Posts\\\\Organisms\\\\Post.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'antd';\nimport { useRouter } from 'next/router';\nimport { CreatePostForm, PostInformation } from '@UI/Organisms';\nimport { CommentItem } from '@UI/Atoms';\nimport { ModalWindowTemplate } from '@UI/Templates';\nconst Wrapped = styled.div.withConfig({\n  displayName: \"Post__Wrapped\",\n  componentId: \"z17osf-0\"\n})([\"display:grid;align-items:center;width:550px;margin:0 auto;\"]);\nconst Information = styled.div.withConfig({\n  displayName: \"Post__Information\",\n  componentId: \"z17osf-1\"\n})([\"\"]);\nconst PositionWrapped = styled.div.withConfig({\n  displayName: \"Post__PositionWrapped\",\n  componentId: \"z17osf-2\"\n})([\"display:grid;align-items:center;height:100%;\"]);\nconst Actions = styled.div.withConfig({\n  displayName: \"Post__Actions\",\n  componentId: \"z17osf-3\"\n})([\"display:grid;grid-template-columns:repeat(2,max-content);grid-column-gap:50px;margin-bottom:15px;\"]);\nexport const Post = ({\n  post\n}) => {\n  const {\n    0: isEdit,\n    1: setIsEdit\n  } = useState(false);\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id,\n    title,\n    body,\n    comments\n  } = post;\n  const onEdit = useCallback(data => {\n    dispatch({\n      type: 'EDIT_POST',\n      payload: {\n        id,\n        data\n      }\n    });\n  }, [dispatch, id]);\n  const onClose = useCallback(() => {\n    setIsEdit(!isEdit);\n  }, [isEdit]);\n  const onGoBack = useCallback(() => {\n    router.back();\n  }, [router]);\n  return __jsx(React.Fragment, null, __jsx(PositionWrapped, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }\n  }, __jsx(Wrapped, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }\n  }, __jsx(Button, {\n    type: \"dashed\",\n    onClick: () => setIsEdit(!isEdit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Edit\"), __jsx(Button, {\n    type: \"dashed\",\n    onClick: onGoBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Go back\")), __jsx(Information, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }\n  }, __jsx(PostInformation, {\n    title: title,\n    body: body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 8\n    }\n  }), __jsx(React.Fragment, null, comments.map(({\n    body,\n    id\n  }) => {\n    return __jsx(CommentItem, {\n      key: id,\n      body: body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    });\n  })))))), isEdit && __jsx(ModalWindowTemplate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(CreatePostForm, {\n    isEdit: true,\n    onSubmit: onEdit,\n    initialValue: {\n      title,\n      body\n    },\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }\n  })));\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Organisms/Post.tsx"],"names":["React","useCallback","useState","styled","useDispatch","Button","useRouter","CreatePostForm","PostInformation","CommentItem","ModalWindowTemplate","Wrapped","div","Information","PositionWrapped","Actions","Post","post","isEdit","setIsEdit","dispatch","router","id","title","body","comments","onEdit","data","type","payload","onClose","onGoBack","back","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Button } from 'antd'\r\nimport { useRouter } from 'next/router'\r\nimport { PostInformationType, PostType } from '@API/REST'\r\nimport { CreatePostForm, PostInformation } from '@UI/Organisms'\r\nimport { CommentItem } from '@UI/Atoms'\r\nimport { ModalWindowTemplate } from '@UI/Templates'\r\n\r\nconst Wrapped = styled.div`\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n\twidth: 550px;\r\n\tmargin: 0 auto;\r\n`\r\nconst Information = styled.div``\r\nconst PositionWrapped = styled.div`\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n\theight: 100%;\r\n`\r\nconst Actions = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(2, max-content);\r\n\tgrid-column-gap: 50px;\r\n\tmargin-bottom: 15px;\r\n`\r\ninterface PropsType {\r\n\tpost: PostInformationType\r\n}\r\nexport const Post: React.FC<PropsType> = ({ post }): React.ReactElement => {\r\n\tconst [isEdit, setIsEdit] = useState(false)\r\n\tconst dispatch = useDispatch()\r\n\tconst router = useRouter()\r\n\tconst { id, title, body, comments } = post\r\n\tconst onEdit = useCallback(\r\n\t\t(data: PostType) => {\r\n\t\t\tdispatch({ type: 'EDIT_POST', payload: { id, data } })\r\n\t\t},\r\n\t\t[dispatch, id]\r\n\t)\r\n\tconst onClose = useCallback(() => {\r\n\t\tsetIsEdit(!isEdit)\r\n\t}, [isEdit])\r\n\tconst onGoBack = useCallback(() => {\r\n\t\trouter.back()\r\n\t}, [router])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PositionWrapped>\r\n\t\t\t\t<Wrapped>\r\n\t\t\t\t\t<Actions>\r\n\t\t\t\t\t\t<Button type='dashed' onClick={() => setIsEdit(!isEdit)}>\r\n\t\t\t\t\t\t\tEdit\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button type='dashed' onClick={onGoBack}>\r\n\t\t\t\t\t\t\tGo back\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Actions>\r\n\t\t\t\t\t<Information>\r\n\t\t\t\t\t\t<PostInformation title={title} body={body}>\r\n\t\t\t\t\t\t\t<Title></Title>\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t{comments.map(({ body, id }) => {\r\n\t\t\t\t\t\t\t\t\treturn <CommentItem key={id} body={body} />\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t</PostInformation>\r\n\t\t\t\t\t</Information>\r\n\t\t\t\t</Wrapped>\r\n\t\t\t</PositionWrapped>\r\n\t\t\t{isEdit && (\r\n\t\t\t\t<ModalWindowTemplate>\r\n\t\t\t\t\t<CreatePostForm\r\n\t\t\t\t\t\tisEdit\r\n\t\t\t\t\t\tonSubmit={onEdit}\r\n\t\t\t\t\t\tinitialValue={{ title, body }}\r\n\t\t\t\t\t\tonClose={onClose}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ModalWindowTemplate>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}