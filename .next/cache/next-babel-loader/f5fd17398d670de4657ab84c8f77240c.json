{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\nconst test = createSagaMiddleware(); //@ts-ignore\n\nconst makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const routerMiddleware = createRouterMiddleware();\n  const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware))); //@ts-ignore\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","createWrapper","rootReducer","rootSaga","test","makeStore","context","sagaMiddleware","routerMiddleware","createRouterMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAkD,oBAAlD;AAEA,SAASC,WAAT,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,IAAI,GAAGJ,oBAAoB,EAAjC,C,CAEA;;AACA,MAAMK,SAAkC,GAAIC,OAAD,IAAsB;AAChE,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,QAAMQ,gBAAgB,GAAGC,sBAAsB,EAA/C;AACA,QAAMC,KAAK,GAAGZ,WAAW,CACxBI,WADwB,EAExBH,mBAAmB,CAACF,eAAe,CAACU,cAAD,CAAhB,CAFK,CAAzB,CAHgE,CAQhE;;AACAG,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBT,QAAnB,CAAjB;AACA,SAAOO,KAAP;AACA,CAXD,C,CAaA;;;AACA,OAAO,MAAMG,OAAO,GAAGZ,aAAa,CAAMI,SAAN,EAAiB;AAAES,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\n\r\nimport { createWrapper, MakeStore, Context } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { rootReducer, AppStateType } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nconst test = createSagaMiddleware()\r\n\r\n//@ts-ignore\r\nconst makeStore: MakeStore<AppStateType> = (context: Context) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\tconst routerMiddleware = createRouterMiddleware()\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\r\n\t)\r\n\r\n\t//@ts-ignore\r\n\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\treturn store\r\n}\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}