{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, preloadedState, applyMiddleware(sagaMiddleware));\n\n  if (req || !isServer) {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","createWrapper","rootReducer","rootSaga","makeStore","context","sagaMiddleware","store","preloadedState","req","isServer","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AAEA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,SAASC,aAAT,QAAyC,oBAAzC;AAGA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,MAAMC,SAAyC,GAAIC,OAAD,IAA2B;AACnF,QAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AAEA,QAAMO,KAAK,GAAGR,WAAW,CAACG,WAAD,EAAcM,cAAd,EAA8BV,eAAe,CAACQ,cAAD,CAA7C,CAAzB;;AAEA,MAAIG,GAAG,IAAI,CAACC,QAAZ,EAAsB;AACrBH,IAAAA,KAAK,CAACI,QAAN,GAAiBL,cAAc,CAACM,GAAf,CAAmBT,QAAnB,CAAjB;AACA;;AAED,SAAOI,KAAP;AACA,CAVM;AAYP,OAAO,MAAMM,OAAO,GAAGZ,aAAa,CAAsBG,SAAtB,EAAiC;AAAEU,EAAAA,KAAK,EAAE;AAAT,CAAjC,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { Context } from 'react'\r\nimport { initialValue } from '@Features/Posts/Model/reducer'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nexport const makeStore: MakeStore<typeof initialValue> = (context: Context<any>) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(rootReducer, preloadedState, applyMiddleware(sagaMiddleware))\r\n\r\n\tif (req || !isServer) {\r\n\t\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\t}\r\n\r\n\treturn store\r\n}\r\n\r\nexport const wrapper = createWrapper<typeof initialValue>(makeStore, { debug: true })\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n"]},"metadata":{},"sourceType":"module"}