{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nexport var makeStore = function makeStore(context) {\n  var store = createStore(rootReducer, applyMiddleware(logger)); //@ts-ignore\n\n  if (module.hot) {\n    //@ts-ignore\n    module.hot.accept('./root-reducer', function () {\n      console.log('Replacing reducer');\n      store.replaceReducer(require('./root-reducer').default);\n    });\n  }\n\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createWrapper","rootReducer","makeStore","context","store","logger","module","hot","accept","console","log","replaceReducer","require","default","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AAGA,SAASC,aAAT,QAAyC,oBAAzC;AAGA,SAAuBC,WAAvB,QAA0C,gBAA1C;AAGA,OAAO,IAAMC,SAAyC,GAAG,SAA5CA,SAA4C,CAACC,OAAD,EAA2B;AACnF,MAAMC,KAAK,GAAGL,WAAW,CAACE,WAAD,EAAcH,eAAe,CAACO,MAAD,CAA7B,CAAzB,CADmF,CAEnF;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACf;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,gBAAlB,EAAoC,YAAM;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAN,MAAAA,KAAK,CAACO,cAAN,CAAqBC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,OAA/C;AACA,KAHD;AAIA;;AAED,SAAOT,KAAP;AACA,CAZM;AAcP,OAAO,IAAMU,OAAO,GAAGd,aAAa,CAAsBE,SAAtB,EAAiC;AAAEa,EAAAA,KAAK,EAAE;AAAT,CAAjC,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { Context } from 'react'\r\nimport { initialValue } from '@Features/Posts/Model/reducer'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nexport const makeStore: MakeStore<typeof initialValue> = (context: Context<any>) => {\r\n\tconst store = createStore(rootReducer, applyMiddleware(logger))\r\n\t//@ts-ignore\r\n\tif (module.hot) {\r\n\t\t//@ts-ignore\r\n\t\tmodule.hot.accept('./root-reducer', () => {\r\n\t\t\tconsole.log('Replacing reducer')\r\n\t\t\tstore.replaceReducer(require('./root-reducer').default)\r\n\t\t})\r\n\t}\r\n\r\n\treturn store\r\n}\r\n\r\nexport const wrapper = createWrapper<typeof initialValue>(makeStore, { debug: true })\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n"]},"metadata":{},"sourceType":"module"}