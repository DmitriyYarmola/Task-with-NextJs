{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nexport const makeStore = context => {\n  const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares))); //@ts-ignore\n\n  if (module.hot) {\n    //@ts-ignore\n    module.hot.accept('./root-reducer', () => {\n      console.log('Replacing reducer');\n      store.replaceReducer(require('./root-reducer').default);\n    });\n  }\n\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","createWrapper","rootReducer","sagaMiddleware","middlewares","makeStore","context","store","module","hot","accept","console","log","replaceReducer","require","default","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAyC,oBAAzC;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,OAAO,MAAME,SAAyB,GAAIC,OAAD,IAA2B;AACnE,QAAMC,KAAK,GAAGT,WAAW,CACxBI,WADwB,EAExBH,mBAAmB,CAACF,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAFK,CAAzB,CADmE,CAKnE;;AACA,MAAII,MAAM,CAACC,GAAX,EAAgB;AACf;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,gBAAlB,EAAoC,MAAM;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAL,MAAAA,KAAK,CAACM,cAAN,CAAqBC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,OAA/C;AACA,KAHD;AAIA;;AAED,SAAOR,KAAP;AACA,CAfM;AAiBP,OAAO,MAAMS,OAAO,GAAGf,aAAa,CAAMI,SAAN,EAAiB;AAAEY,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { Context } from 'react'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middlewares = [sagaMiddleware]\r\nexport const makeStore: MakeStore<any> = (context: Context<any>) => {\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tcomposeWithDevTools(applyMiddleware(...middlewares))\r\n\t)\r\n\t//@ts-ignore\r\n\tif (module.hot) {\r\n\t\t//@ts-ignore\r\n\t\tmodule.hot.accept('./root-reducer', () => {\r\n\t\t\tconsole.log('Replacing reducer')\r\n\t\t\tstore.replaceReducer(require('./root-reducer').default)\r\n\t\t})\r\n\t}\r\n\r\n\treturn store\r\n}\r\n\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}