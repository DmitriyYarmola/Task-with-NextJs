{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    //@ts-ignore\n    return DevTools.composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nfunction configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InitialState;\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\n\n  store.runSagaTask = function () {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }; // run the rootSaga initially\n\n\n  store.runSagaTask();\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","bindMiddleware","middleware","DevTools","composeWithDevTools","configureStore","initialState","InitialState","sagaMiddleware","store","runSagaTask","sagaTask","run"],"mappings":";AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AAEA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAuB;AAC7C,YAA2C;AAC1C;AACA,WAAOC,QAAQ,CAACC,mBAAT,CAA6BR,eAAe,MAAf,4BAAmBM,UAAnB,EAA7B,CAAP;AACA;;AACD,SAAON,eAAe,MAAf,4BAAmBM,UAAnB,EAAP;AACA,CAND;;AAQA,SAASG,cAAT,GAAqD;AAAA,MAA7BC,YAA6B,uEAAdC,YAAc;AACpD,MAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,MAAMW,KAAK,GAAGZ,WAAW,CACxBE,WADwB,EAExBO,YAFwB,EAGxBL,cAAc,CAAC,CAACO,cAAD,CAAD,CAHU,CAAzB;;AAMAC,EAAAA,KAAK,CAACC,WAAN,GAAoB,YAAM;AACzBD,IAAAA,KAAK,CAACE,QAAN,GAAiBH,cAAc,CAACI,GAAf,CAAmBZ,QAAnB,CAAjB;AACA,GAFD,CARoD,CAYpD;;;AACAS,EAAAA,KAAK,CAACC,WAAN;AAEA,SAAOD,KAAP;AACA;;AAED,eAAeJ,cAAf","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nconst bindMiddleware = (middleware: any[]) => {\r\n\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t//@ts-ignore\r\n\t\treturn DevTools.composeWithDevTools(applyMiddleware(...middleware))\r\n\t}\r\n\treturn applyMiddleware(...middleware)\r\n}\r\n\r\nfunction configureStore(initialState = InitialState) {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tinitialState,\r\n\t\tbindMiddleware([sagaMiddleware])\r\n\t) as ExtendedStore\r\n\r\n\tstore.runSagaTask = () => {\r\n\t\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\t}\r\n\r\n\t// run the rootSaga initially\r\n\tstore.runSagaTask()\r\n\r\n\treturn store\r\n}\r\n\r\nexport default configureStore\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n"]},"metadata":{},"sourceType":"module"}