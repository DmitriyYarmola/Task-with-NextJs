{"ast":null,"code":"import { createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nvar sagaMiddleware = createSagaMiddleware();\nvar middlewares = [sagaMiddleware];\nexport var makeStore = function makeStore(context) {\n  return createStore(rootReducer);\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["createStore","createSagaMiddleware","createWrapper","rootReducer","sagaMiddleware","middlewares","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAAoDA,WAApD,QAA8E,OAA9E;AAEA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAyC,oBAAzC;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AAEA,IAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,IAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AAEA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAsB;AAC9C,SAAOP,WAAW,CAACG,WAAD,CAAlB;AACA,CAFM;AAKP,OAAO,IAAMK,OAAO,GAAGN,aAAa,CAAMI,SAAN,EAAiB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { Context } from 'react'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middlewares = [sagaMiddleware]\r\n\r\nexport const makeStore = (context: Context) => {\r\n\treturn createStore(rootReducer)\r\n}\r\n\r\n\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}