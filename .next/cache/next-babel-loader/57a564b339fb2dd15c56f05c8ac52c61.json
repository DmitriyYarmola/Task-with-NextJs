{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { createRouterMiddleware } from 'connected-next-router';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n\nvar makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var routerMiddleware = createRouterMiddleware();\n  var store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))); //@ts-ignore\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","createWrapper","createRouterMiddleware","rootReducer","rootSaga","makeStore","context","sagaMiddleware","routerMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAkD,oBAAlD;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AACA,SAASC,WAAT,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAGA,IAAMC,SAAyC,GAAG,SAA5CA,SAA4C,CAACC,OAAD,EAAsB;AACvE,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,MAAMQ,gBAAgB,GAAGN,sBAAsB,EAA/C;AACA,MAAMO,KAAK,GAAGX,WAAW,CACxBK,WADwB,EAExBJ,mBAAmB,CAACF,eAAe,CAACU,cAAD,EAAiBC,gBAAjB,CAAhB,CAFK,CAAzB,CAHuE,CAQvE;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBH,cAAc,CAACI,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACA,CAXD,C,CAaA;;;AACA,OAAO,IAAMG,OAAO,GAAGX,aAAa,CAAMI,SAAN,EAAiB;AAAEQ,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\n\r\nimport { createWrapper, MakeStore, Context } from 'next-redux-wrapper'\r\nimport { createRouterMiddleware } from 'connected-next-router'\r\nimport { rootReducer, AppStateType } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\n\r\nconst makeStore: MakeStore<typeof AppStateType> = (context: Context) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\tconst routerMiddleware = createRouterMiddleware()\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))\r\n\t)\r\n\r\n\t//@ts-ignore\r\n\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\treturn store\r\n}\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}