{"ast":null,"code":"import createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nvar test = createSagaMiddleware(); //@ts-ignore\n\nvar makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  return store;\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["createSagaMiddleware","createWrapper","test","makeStore","context","sagaMiddleware","store","wrapper","debug"],"mappings":"AAEA,OAAOA,oBAAP,MAA2C,YAA3C;AAEA,SAASC,aAAT,QAAkD,oBAAlD;AAIA,IAAMC,IAAI,GAAGF,oBAAoB,EAAjC,C,CAGA;;AACA,IAAMG,SAAyB,GAAG,SAA5BA,SAA4B,CAACC,OAAD,EAAsB;AACvD,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,SAAOM,KAAP;AACA,CAJD,C,CAMA;;;AACA,OAAO,IAAMC,OAAO,GAAGN,aAAa,CAAME,SAAN,EAAiB;AAAEK,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\n\r\nimport { createWrapper, MakeStore, Context } from 'next-redux-wrapper'\r\nimport App from 'next/app'\r\nimport { rootReducer } from './root-reducer'\r\n\r\nconst test = createSagaMiddleware()\r\n\r\n\r\n//@ts-ignore\r\nconst makeStore: MakeStore<any> = (context: Context) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\treturn store\r\n}\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: true })\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n"]},"metadata":{},"sourceType":"module"}