{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n\nfunction configureReducer(isServer, rootReducer) {\n  if (!isServer) {\n    return persistReducer({\n      key: 'root',\n      version: 0,\n      storage: localforage,\n      whitelist: []\n    }, reduceCompoundActions(rootReducer));\n  }\n\n  return reduceCompoundActions(rootReducer);\n}\n\nvar composeEnhancers = true && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport function configureStore(stateFromServer, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(configureReducer(options.isServer, rootReducer), stateFromServer || initialState, composeEnhancers(applyMiddleware(sagaMiddleware))) // redux persistence to local storage\n  ;\n  store.__persister = persistStore(store) // start saga middleware\n  ;\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","compose","createStore","createSagaMiddleware","rootReducer","rootSaga","configureReducer","isServer","persistReducer","key","version","storage","localforage","whitelist","reduceCompoundActions","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","stateFromServer","options","sagaMiddleware","store","initialState","__persister","persistStore","sagaTask","run"],"mappings":"AAAA,SAASA,eAAT,EAA2CC,OAA3C,EAAoDC,WAApD,QAA8E,OAA9E;AAEA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAWA,SAASC,gBAAT,CAA6BC,QAA7B,EAAgDH,WAAhD,EAAqF;AACpF,MAAI,CAACG,QAAL,EAAe;AACd,WAAOC,cAAc,CACpB;AACCC,MAAAA,GAAG,EAAE,MADN;AAECC,MAAAA,OAAO,EAAE,CAFV;AAGCC,MAAAA,OAAO,EAAEC,WAHV;AAICC,MAAAA,SAAS,EAAE;AAJZ,KADoB,EAOpBC,qBAAqB,CAACV,WAAD,CAPD,CAArB;AASA;;AAED,SAAOU,qBAAqB,CAACV,WAAD,CAA5B;AACA;;AAED,IAAMW,gBAAgB,GACpB,QAAiCC,MAAM,CAACC,oCAAzC,IACAhB,OAFD;AAQA,OAAO,SAASiB,cAAT,CAAwBC,eAAxB,EAAmDC,OAAnD,EAA2E;AACjF,MAAMC,cAAc,GAAGlB,oBAAoB,EAA3C;AAEA,MAAMmB,KAAK,GAAGpB,WAAW,CACxBI,gBAAgB,CAACc,OAAO,CAACb,QAAT,EAAmBH,WAAnB,CADQ,EAExBe,eAAe,IAAII,YAFK,EAGxBR,gBAAgB,CAACf,eAAe,CAACqB,cAAD,CAAhB,CAHQ,CAAzB,CAMA;AANA;AAOEC,EAAAA,KAAD,CAAeE,WAAf,GAA6BC,YAAY,CAACH,KAAD,CAAzC,CAED;AAFC;AAGCA,EAAAA,KAAD,CAAeI,QAAf,GAA0BL,cAAc,CAACM,GAAf,CAAmBtB,QAAnB,CAA1B;AAED,SAAOiB,KAAP;AACA","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\t//@ts-ignore\r\n\t\t__REDUX_DEVTOOLS_EXTENSION__: Function\r\n\t\t//@ts-ignore\r\n\t\t__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: Function\r\n\t}\r\n}\r\n\r\nfunction configureReducer<S>(isServer: boolean, rootReducer: Reducer<S>): Reducer<S> {\r\n\tif (!isServer) {\r\n\t\treturn persistReducer(\r\n\t\t\t{\r\n\t\t\t\tkey: 'root',\r\n\t\t\t\tversion: 0,\r\n\t\t\t\tstorage: localforage,\r\n\t\t\t\twhitelist: [],\r\n\t\t\t},\r\n\t\t\treduceCompoundActions(rootReducer)\r\n\t\t)\r\n\t}\r\n\r\n\treturn reduceCompoundActions(rootReducer)\r\n}\r\n\r\nconst composeEnhancers =\r\n\t(typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n\tcompose\r\n\r\ninterface MakeStoreOpts {\r\n\tisServer: boolean\r\n}\r\n\r\nexport function configureStore(stateFromServer: AppState, options: MakeStoreOpts) {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(\r\n\t\tconfigureReducer(options.isServer, rootReducer),\r\n\t\tstateFromServer || initialState,\r\n\t\tcomposeEnhancers(applyMiddleware(sagaMiddleware))\r\n\t)\r\n\r\n\t// redux persistence to local storage\r\n\t;(store as any).__persister = persistStore(store)\r\n\r\n\t// start saga middleware\r\n\t;(store as any).sagaTask = sagaMiddleware.run(rootSaga)\r\n\r\n\treturn store\r\n}\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n"]},"metadata":{},"sourceType":"module"}