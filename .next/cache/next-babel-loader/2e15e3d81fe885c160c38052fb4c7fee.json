{"ast":null,"code":"import { call, put, all, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-next-router';\nimport { actions } from '@Features/Posts/Model/actions';\nimport { API } from '@API/index';\nimport * as types from './types';\n\nfunction* getPostsSaga() {\n  yield put(actions.setLoading(true));\n\n  try {\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* createPostSaga({\n  payload\n}) {\n  const {\n    data,\n    push\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.createPost, data);\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n    yield put(push('/'));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* deletePostSaga({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.deletePost, id);\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n    yield put(push('/'));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* viewPostSaga({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    const response = yield call(API.PostsAPI.viewPost, id);\n    yield put(actions.setPost(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* editPostSaga({\n  payload\n}) {\n  const {\n    id,\n    data\n  } = payload;\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.updatePost, id, data);\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nexport function* rootSaga() {\n  yield all([takeEvery(types.GET_POSTS, getPostsSaga), takeEvery(types.CREATE_POST, createPostSaga), takeEvery(types.DELETE_POST, deletePostSaga), takeEvery(types.VIEW_POST, viewPostSaga), takeEvery(types.EDIT_POST, editPostSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Model/saga.ts"],"names":["call","put","all","takeEvery","push","actions","API","types","getPostsSaga","setLoading","response","PostsAPI","getPosts","setPosts","data","error","console","log","createPostSaga","payload","createPost","deletePostSaga","id","deletePost","viewPostSaga","viewPost","setPost","editPostSaga","updatePost","rootSaga","GET_POSTS","CREATE_POST","DELETE_POST","VIEW_POST","EDIT_POST"],"mappings":"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","sourcesContent":["import { call, put, all, takeEvery } from 'redux-saga/effects'\r\nimport { push } from 'connected-next-router'\r\nimport { actions } from '@Features/Posts/Model/actions'\r\nimport { API, PostType } from '@API/index'\r\nimport * as types from './types'\r\n\r\nfunction* getPostsSaga() {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface CreatePostType {\r\n\ttype: string\r\n\tpayload: { data: PostType; push: any }\r\n}\r\nfunction* createPostSaga({ payload }: CreatePostType) {\r\n\tconst { data, push } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.createPost, data)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put(push('/'))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface DeletePostType {\r\n\ttype: string\r\n\tpayload: { id: number }\r\n}\r\nfunction* deletePostSaga({ payload }: DeletePostType) {\r\n\tconst { id } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.deletePost, id)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put(push('/'))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface ViewPostType {\r\n\ttype: string\r\n\tpayload: { id: number }\r\n}\r\n\r\nfunction* viewPostSaga({ payload }: ViewPostType) {\r\n\tconst { id } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.viewPost, id)\r\n\t\tyield put(actions.setPost(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface EditPostType {\r\n\ttype: string\r\n\tpayload: { id: number; data: PostType }\r\n}\r\n\r\nfunction* editPostSaga({ payload }: EditPostType) {\r\n\tconst { id, data } = payload\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.updatePost, id, data)\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\nexport function* rootSaga() {\r\n\tyield all([\r\n\t\ttakeEvery(types.GET_POSTS, getPostsSaga),\r\n\t\ttakeEvery(types.CREATE_POST, createPostSaga),\r\n\t\ttakeEvery(types.DELETE_POST, deletePostSaga),\r\n\t\ttakeEvery(types.VIEW_POST, viewPostSaga),\r\n\t\ttakeEvery(types.EDIT_POST, editPostSaga),\r\n\t])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}