{"ast":null,"code":"import { call, put, all, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-next-router';\nimport { actions } from '@Features/Posts/Model/actions';\nimport { API } from '@API/index';\nimport * as types from './types';\n\nfunction* getPostsSaga() {\n  yield put(actions.setLoading(true));\n\n  try {\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nfunction* createPostSaga({\n  payload\n}) {\n  yield put(actions.setLoading(true));\n\n  try {\n    yield call(API.PostsAPI.createPost, payload);\n    const response = yield call(API.PostsAPI.getPosts);\n    yield put(actions.setPosts(response.data));\n    yield put(actions.setLoading(false));\n    yield put(push('/'));\n  } catch (error) {\n    yield put(actions.setLoading(false));\n    console.log(error);\n  }\n}\n\nexport function* rootSaga() {\n  yield all([takeEvery(types.GET_POSTS, getPostsSaga), takeEvery(types.CREATE_POST, createPostSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Features/Posts/Model/saga.ts"],"names":["call","put","all","takeEvery","push","actions","API","types","getPostsSaga","setLoading","response","PostsAPI","getPosts","setPosts","data","error","console","log","createPostSaga","payload","createPost","rootSaga","GET_POSTS","CREATE_POST"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,GAAT,QAA8B,YAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;;AAEA,UAAUC,YAAV,GAAyB;AACxB,QAAMP,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,IAAnB,CAAD,CAAT;;AACA,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACM,GAAG,CAACK,QAAJ,CAAaC,QAAd,CAA3B;AACA,UAAMX,GAAG,CAACI,OAAO,CAACQ,QAAR,CAAiBH,QAAQ,CAACI,IAA1B,CAAD,CAAT;AACA,UAAMb,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,KAAnB,CAAD,CAAT;AACA,GAJD,CAIE,OAAOM,KAAP,EAAc;AACf,UAAMd,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,KAAnB,CAAD,CAAT;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD;;AAMD,UAAUG,cAAV,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAkD;AACjD,QAAMlB,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,IAAnB,CAAD,CAAT;;AACA,MAAI;AACH,UAAMT,IAAI,CAACM,GAAG,CAACK,QAAJ,CAAaS,UAAd,EAA0BD,OAA1B,CAAV;AACA,UAAMT,QAAQ,GAAG,MAAMV,IAAI,CAACM,GAAG,CAACK,QAAJ,CAAaC,QAAd,CAA3B;AACA,UAAMX,GAAG,CAACI,OAAO,CAACQ,QAAR,CAAiBH,QAAQ,CAACI,IAA1B,CAAD,CAAT;AACA,UAAMb,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,KAAnB,CAAD,CAAT;AACA,UAAMR,GAAG,CAACG,IAAI,CAAC,GAAD,CAAL,CAAT;AACA,GAND,CAME,OAAOW,KAAP,EAAc;AACf,UAAMd,GAAG,CAACI,OAAO,CAACI,UAAR,CAAmB,KAAnB,CAAD,CAAT;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD;;AACD,OAAO,UAAUM,QAAV,GAAqB;AAC3B,QAAMnB,GAAG,CAAC,CACTC,SAAS,CAACI,KAAK,CAACe,SAAP,EAAkBd,YAAlB,CADA,EAETL,SAAS,CAACI,KAAK,CAACgB,WAAP,EAAoBL,cAApB,CAFA,CAAD,CAAT;AAIA","sourcesContent":["import { call, put, all, takeEvery } from 'redux-saga/effects'\r\nimport { push } from 'connected-next-router'\r\nimport { actions } from '@Features/Posts/Model/actions'\r\nimport { API, PostType } from '@API/index'\r\nimport * as types from './types'\r\n\r\nfunction* getPostsSaga() {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\ninterface CreatePost {\r\n\ttype: string\r\n\tpayload: PostType\r\n}\r\nfunction* createPostSaga({ payload }: CreatePost) {\r\n\tyield put(actions.setLoading(true))\r\n\ttry {\r\n\t\tyield call(API.PostsAPI.createPost, payload)\r\n\t\tconst response = yield call(API.PostsAPI.getPosts)\r\n\t\tyield put(actions.setPosts(response.data))\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tyield put(push('/'))\r\n\t} catch (error) {\r\n\t\tyield put(actions.setLoading(false))\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\nexport function* rootSaga() {\r\n\tyield all([\r\n\t\ttakeEvery(types.GET_POSTS, getPostsSaga),\r\n\t\ttakeEvery(types.CREATE_POST, createPostSaga),\r\n\t])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}