{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\nvar sagaMiddleware = createSagaMiddleware();\nvar middlewares = [sagaMiddleware];\nexport var makeStore = function makeStore(initialState) {\n  sagaMiddleware.run(rootSaga);\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n};\n\nfunction configureStore(preloadedState, _ref) {\n  var isServer = _ref.isServer,\n      _ref$req = _ref.req,\n      req = _ref$req === void 0 ? null : _ref$req;\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, preloadedState, applyMiddleware(sagaMiddleware));\n  /**\r\n   * next-redux-saga depends on `sagaTask` being attached to the store during `getInitialProps`.\r\n   * It is used to await the rootSaga task before sending results to the client.\r\n   * However, next-redux-wrapper creates two server-side stores per request:\r\n   * One before `getInitialProps` and one before SSR (see issue #62 for details).\r\n   * On the server side, we run rootSaga during `getInitialProps` only:\r\n   */\n\n  if (req || !isServer) {\n    //@ts-ignore\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","middlewares","makeStore","initialState","run","configureStore","preloadedState","isServer","req","store","sagaTask"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,IAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,IAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,YAAD,EAAuB;AAC/CH,EAAAA,cAAc,CAACI,GAAf,CAAmBL,QAAnB;AACA,SAAOJ,WAAW,CACjBG,WADiB,EAEjBK,YAFiB,EAGjBP,mBAAmB,CAACF,eAAe,CAACM,cAAD,CAAhB,CAHF,CAAlB;AAKA,CAPM;;AASP,SAASK,cAAT,CAAwBC,cAAxB,QAAqE;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,sBAAbC,GAAa;AAAA,MAAbA,GAAa,yBAAP,IAAO;AAEpE,MAAMR,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMY,KAAK,GAAGd,WAAW,CACxBG,WADwB,EAExBQ,cAFwB,EAGxBZ,eAAe,CAACM,cAAD,CAHS,CAAzB;AAMA;;;;;;;;AAQA,MAAIQ,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACrB;AACAE,IAAAA,KAAK,CAACC,QAAN,GAAiBV,cAAc,CAACI,GAAf,CAAmBL,QAAnB,CAAjB;AACA;;AAED,SAAOU,KAAP;AACA;;AAED,eAAeJ,cAAf","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middlewares = [sagaMiddleware]\r\nexport const makeStore = (initialState: any) => {\r\n\tsagaMiddleware.run(rootSaga)\r\n\treturn createStore(\r\n\t\trootReducer,\r\n\t\tinitialState,\r\n\t\tcomposeWithDevTools(applyMiddleware(sagaMiddleware))\r\n\t)\r\n}\r\n\r\nfunction configureStore(preloadedState: any, {isServer, req = null}) {\r\n\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tpreloadedState,\r\n\t\tapplyMiddleware(sagaMiddleware)\r\n\t)\r\n\r\n\t/**\r\n\t * next-redux-saga depends on `sagaTask` being attached to the store during `getInitialProps`.\r\n\t * It is used to await the rootSaga task before sending results to the client.\r\n\t * However, next-redux-wrapper creates two server-side stores per request:\r\n\t * One before `getInitialProps` and one before SSR (see issue #62 for details).\r\n\t * On the server side, we run rootSaga during `getInitialProps` only:\r\n\t */\r\n\r\n\tif (req || !isServer) {\r\n\t\t//@ts-ignore\r\n\t\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\t}\r\n\r\n\treturn store\r\n}\r\n\r\nexport default configureStore\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n"]},"metadata":{},"sourceType":"module"}