{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nexport const makeStore = initialState => {\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\n};\nexport const configureStore = initialState => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, initialState, applyMiddleware(sagaMiddleware)); //@ts-ignore\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Create-Project/src/Components/Lib/Store/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","createWrapper","rootReducer","rootSaga","sagaMiddleware","middlewares","makeStore","initialState","configureStore","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAAoDC,WAApD,QAA8E,OAA9E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,SAASC,aAAT,QAAyC,oBAAzC;AACA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,OAAO,MAAME,SAAS,GAAIC,YAAD,IAAuB;AAC/C,SAAOT,WAAW,CACjBI,WADiB,EAEjBK,YAFiB,EAGjBR,mBAAmB,CAACF,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAHF,CAAlB;AAKA,CANM;AAiBP,OAAO,MAAMG,cAAuC,GAAID,YAAD,IAAuB;AAC7E,QAAMH,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,QAAMS,KAAK,GAAGX,WAAW,CAACI,WAAD,EAAcK,YAAd,EAA4BV,eAAe,CAACO,cAAD,CAA3C,CAAzB,CAH6E,CAK7E;;AACAK,EAAAA,KAAK,CAACC,QAAN,GAAiBN,cAAc,CAACO,GAAf,CAAmBR,QAAnB,CAAjB;AAEA,SAAOM,KAAP;AACA,CATM;AAWP,OAAO,MAAMG,OAAO,GAAGX,aAAa,CAAeK,SAAf,EAA0B;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAA1B,CAA7B","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware, { Task } from 'redux-saga'\r\nimport { createWrapper, MakeStore } from 'next-redux-wrapper'\r\nimport { AppStateType, rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middlewares = [sagaMiddleware]\r\nexport const makeStore = (initialState: any) => {\r\n\treturn createStore(\r\n\t\trootReducer,\r\n\t\tinitialState,\r\n\t\tcomposeWithDevTools(applyMiddleware(...middlewares))\r\n\t)\r\n}\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<\r\n\tT extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n\r\nexport interface SagaStore extends Store {\r\n\tsagaTask?: Task\r\n}\r\n\r\nexport const configureStore: MakeStore<AppStateType> = (initialState: any) => {\r\n\tconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\tconst store = createStore(rootReducer, initialState, applyMiddleware(sagaMiddleware))\r\n\r\n\t//@ts-ignore\r\n\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\r\n\treturn store\r\n}\r\n\r\nexport const wrapper = createWrapper<AppStateType>(makeStore, { debug: true })\r\n"]},"metadata":{},"sourceType":"module"}